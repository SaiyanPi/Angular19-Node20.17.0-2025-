Preventing navigation away from a route:

- A guard that controls if a route can be deactivated is a function of the CanDeactivateFn type.
    We will learn how to use it by implementing a guard that notifies the user of pending products
    in the cart when they navigate away from the cart component:

1) Run the following command to generate a new guard:

        cmd: ng generate guard checkout

2) Select the CanDeactivate type from the list and press Enter.

3) Open the checkout.guard.ts file and add the following import statement:

        import { CartComponent } from './cart/cart.component';

4) Change the generic of the CanDeactivateFn to CartComponent and remove the parameters of the
    arrow function.

        export const checkoutGuard: CanDeactivateFn<CartComponent> = () => {
            return true;
        };

5) Replace the body of the arrow function with the following snippet:

        export const checkoutGuard: CanDeactivateFn<CartComponent> = () => {
            const confirmation = confirm('You have pending items in your cart. Do you want to continue?');
            return confirmation;
        };
    
    -> In the preceding snippet, we use the confirm method of the global window object to display 
        a confirmation dialog before navigating away from the cart component.
    -> The application execution will wait until the confirmation dialog is dismissed as a user
        interaction.

6) Open the app.routes.ts file and add the following import statement:

        import { checkoutGuard } from './checkout.guard';

7) A route definition object contains a canDeactivate array similar to canActivate. Add the
    checkoutGuard function to the canDeactivate array of the cart route:

        {
            path: 'cart',
            component: CartComponent,
            canActivate: [authGuard],
        👉  canDeactivate: [checkoutGuard]
        },
    
    📝
    The canDeactivate property is an array because multiple guards can control route deactivation.
    The order of guards in the array is important. If one of the guards fails to pass, Angular will
    prevent a user leaving the route. 

    -> For such a simple scenario, we could have written the logic of the checkoutGuard function
        inline to avoid the creation of the checkout.guard.ts file:

        {
            path: 'cart',
            component: CartComponent,
            canActivate: [authGuard],
            canDeactivate:👉 [() => confirm('You have pending items in your cart. Do you want to
                continue?')]
        },

- Run the application using the ng serve command and click the My Cart link after you have logged 
    in. If you then click on the Products link or press the back button of the browser, you should
    see a dialog with the following message: (canDeactivate.png image)

        You have pending items in your cart� Do you want to continue?
    
    If you click the Cancel button, the navigation is canceled, and the application remains in its
    current state. If you click the OK button, you will be redirected to the product list.