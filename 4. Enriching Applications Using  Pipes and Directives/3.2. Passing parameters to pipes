Passing parameters to pipes:

- As we learned in the section 2, we can pass additional parameters to a pipe using colons like 
    {{selectedProduct.price | currency:'NPR'}}

- We use the args parameter in the transform method of a pipe to get the value of each parameter separated
    by a colon. In the previous section 3.1, We learned that the Angular CLI creates the args parameter by
    default and uses the spread operator to expand its values in the method:

        transform(value: Product[], ...args: unknown[]): Product[] {
            // omitted
        }

- the transform method can currently work only with the title property of a product. We could leverage the
    args parameter to make it dynamic and allow the consumer of the pipe to define the property they want
    to sort data, such as the product price:

1) Remove the spread operator from the args parameter because we will pass a single property of a product
    each time and change its type, as follows:

        transform(value: Product[], 👉 args: keyof Product): Product[] {
            if (value) {
                return value.sort((a: Product, b: Product) => {
                    if (a.title < b.title) {
                        return -1; 
                    } else if (b.title < a.title) {
                        return 1; 
                    }
                    return 0;
                });
            }
            return [];
        }
    
    -> IN THE PRECEEDING METHOD, WE USE THE keyof TYPE OPERATOR FROM TYPESCRIPT TO DEFINE THAT THE ARGS
        PARAMETER CAN BE ANY PROPERTY OF A PRODUCT OBJECT.

2) Replace the title property with the args parameter inside the if statement:

        transform(value: Product[], args: keyof Product): Product[] {
            if (value) {
                return value.sort((a: Product, b: Product) => {
                    if (a👉[args] < b👉[args]) {
                        return -1;  // put a before b
                    } else if (b👉[args] < a👉[args]) {
                        return 1; // put b before a
                    }
                    return 0;
                });
            }
            return [];
        }
    
    -> Notice that in the preceding snippet, we access the a and b objects using square bracket syntax
        instead of the dot syntax as before.

3) Modify the args parameter in the method signature so that it uses the title property by default, if the
    consumer does not pass any parameter in the pipe:

        transform(value: Product[], args: keyof Product 👉= 'title'): Product[] {
            // omitted
        }
        
    -> this ensures that the product list component will work without any change to the pipe usage
    
4) Run the ng serve command and verify that the product list is sorted initially by title.
        
        ⌨️ Keyboard
        🎙️ Microphone
        🏷️ Tablet
        🏷️ Web camera

5) Open the product-list.component.html file and pass the price property as a pipe parameter:

        @for (product of products | sort👉: 'price'; track product.id; let i = $index) {
            // omitted
        }

6) Save the file and wait for the application to reload. You should see that the product list is now sorted
    by price

        ⌨️ Keyboard
        🏷️ Web camera
        🎙️ Microphone
        🏷️ Tablet

- The @Pipe decorator contains another significant property that we can set, which is directly related to the
    way that pipes react in the change detection mechanism of the Angular framework.