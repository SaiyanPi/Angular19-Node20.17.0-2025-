Sorting data using pipes:

1) To create a new pipe, we use the ng generate command of the Angular CLI, passing its name as a parameter:

        cmd: ng generate pipe sort

    -> The preceding command will generate all necessary files(sort.pipe.spec.ts and) of the sort pipe
        inside the folder where we run the ng generate command.

- The TypeScript class of the pipe is defined in the sort.pipe.ts file:

        import { Pipe, PipeTransform } from '@angular/core';

        @Pipe({
            name: 'sort'
        })
        export class SortPipe implements PipeTransform {

            transform(value: unknown, ...args: unknown[]): unknown {
                return null;
            }

        }

    -> The @Pipe is an Angular decorator that defines the name of the Angular pipe.
    -> The TypeScript class of a pipe implements the transform method of the PipeTransform interface and
        accepts two parameters:
        • value: The input data that we want to transform
        • args: An optional list of arguments we can provide to the transformation method, each separated
                by a colon

- The Angular CLI helped us by scaffolding an empty transform method. We now need to modify it to satisfy
    our business needs. The pipe will operate on a list of Product objects, so we need to make the necessary
    adjustments to the types provided:

    2) Add the following statement to import the Product interface:

        import { Product } from './product';

    3) Change the type of the value parameter to Product[] since we want to sort a list of Product objects.

        import { Pipe, PipeTransform } from '@angular/core';
        import { Product } from './product';

        @Pipe({
        name: 'sort'
        })
        export class SortPipe implements PipeTransform {

            transform(value: 👉Product[], ...args: unknown[]): 👉Product[] {
                👉return [];
            }

        }

    3) We are now ready to implement the sorting algorithm of our method. We will use the native sort method,
        which sorts items alphabetically by default. We will provide a custom comparator function to the sort
        method that overrides the default functionality and performs the sorting logic that we want to
        achieve:

        export class SortPipe implements PipeTransform {

            transform(value: Product[], ...args: unknown[]): Product[] {
                if (value) {
                    return value.sort((a: Product, b: Product) => {
                        if (a.title < b.title) {
                            return -1;
                        } else if (b.title < a.title) {
                            return 1;
                        }
                        return 0;
                    });
                }
                return [];
            }
        }

        -> checks whether there is input data first before proceeding to the sorting process. Otherwise, it
            returns an empty array.
        -> compareFn(a, b);
            return -1 means sort a before b
            return 1 means sort b before a 
            return 0 means keep the original order
    
    - That’s it! We have successfully created our first pipe.

-----------------------------------------------------------------------------------------------------------------

# Implementing Sort pipe:

1) We need to call it from our component template to see it in action. Open the product-list.component.ts
    file and import the SortPipe class:

        import { Component } from '@angular/core';
        import { Product } from '../product'; // importing interface
        import { ProductDetailComponent } from '../product-detail/product-detail.component';
    👉  import { SortPipe } from '../sort.pipe';

        @Component({
            selector: 'app-product-list',
            imports: [ProductDetailComponent, 👉 SortPipe],
            templateUrl: './product-list.component.html',
            styleUrl: './product-list.component.css'
        })

2) Open the product-list.component.html file and add the pipe in the @for block:

        <ul class = "pill-group">
            @for (product of products 👉| sort; track product.id; let i = $index) {
                // omitted
            }
            // omitted
        </ul>

3) If we run the application, we will notice that the product list is now sorted by title alphabetically:

        Products (4)
        ⌨️ Keyboard
        🎙️ Microphone
        🏷️ Tablet
        🏷️ Web camera
        
- The sort pipe can sort product data only by title. In the following section, we will learn how to configure
    the pipe so that it can sort by other product properties as well.
