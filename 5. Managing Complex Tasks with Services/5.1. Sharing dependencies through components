Sharing dependencies through components:

- A service provided through a component can be shared among the child components of the parent 
    component, and it is immediately available for injection into their constructors Child components 
    reuse the same instance of the service as the parent component.
    Let‚Äôs walk our way through an example to understand this better:

1) Create a new Angular component named favorites:

        cmd: ng generate component favorites

2) Open the favorites.component.ts file and modify the import statements accordingly:

        import { Component } from '@angular/core';
    üëâ  import { Product } from '../product';
    üëâ  import { ProductsService } from '../products.service';

3) Modify the FavoritesComponent class to use the ProductsService class and get the product list in a
    products component property:

        import { Component,üëâ OnInit } from '@angular/core';
        import { Product } from '../product';
        import { ProductsService } from '../products.service';

        @Component({
        selector: 'app-favorites',
        imports: [],
        templateUrl: './favorites.component.html',
        styleUrl: './favorites.component.css',
        })
        export class FavoritesComponent üëâimplements OnInit {

            üëâproducts: Product[] = [];

            üëâconstructor( private productService: ProductsService ){}

            üëângOnInit(): void {
                this.products = this.productService.getProducts();
            }
        }
    
    -> similar to section 3.1

4) Open the favorites.component.html file and replace its content with the following HTML code:

        <ul class="pill-group">
            @for (product of products | slice:1:3; track product.id){
                <li class="pill">
                    ‚≠ê {{product.title}}
                </li>
            }
        </ul>
    
    -> In the preceding snippet, we iterate over the products array and use the slice pipe to display
        only two products.

5) Modify the favorites.component.ts file so that it imports the CommonModule class that is needed for
    the slice pipe:

    üëâ import { CommonModule } from '@angular/common';
        import { Component, OnInit } from '@angular/core';
        import { Product } from '../product';
        import { ProductsService } from '../products.service';

        @Component({
            selector: 'app-favorites',
            imports: [üëâCommonModule],
            templateUrl: './favorites.component.html',
            styleUrl: './favorites.component.css',
        })

6) Open the favorites.component.css file to add some CSS styles to our favorite products:

        .pill-group {
            display: flex;
            flex-direction: column;
            align-items: start;
            flex-wrap: wrap;
            gap: 1.25rem;
        }
        .pill {
            display: flex;
            align-items: center;
            --pill-accent: var(--hot-red);
            background: color-mix(in srgb, var(--hot-red) 5%, transparent);
            color: var(--pill-accent);
            padding-inline: 0.75rem;
            padding-block: 0.375rem;
            border-radius: 2.75rem;
            border: 0;
            transition: background 0.3s ease;
            font-family: var(--inter-font);
            font-size: 0.875rem;
            font-style: normal;
            font-weight: 500;
            line-height: 1.4rem;
            letter-spacing: -0.00875rem;
            text-decoration: none;
        }

7) Open the product-list.component.ts file, import the FavoritesComponent class, and add the
    ProductsService class to the providers array of the @Component decorator:

        import { Component, OnInit, Inject, inject } from '@angular/core';
        import { Product } from '../product'; // importing interface
        import { ProductDetailComponent } from '../product-detail/product-detail.component';
        import { SortPipe } from '../sort.pipe';
        import { ProductsService } from '../products.service';
    üëâ  import { FavoritesComponent } from '../favorites/favorites.component';

        @Component({
            selector: 'app-product-list',
            imports: [ProductDetailComponent, SortPipe, üëâFavoritesComponent],
            templateUrl: './product-list.component.html',
            styleUrl: './product-list.component.css',
        üëâ  providers: [ProductsService]
        })

8) Open the products.service.ts file and remove the providedIn property from the  @Injectable decorator
    since the element injector of the product list component will provide it.

        @Injectable()

9) Finally, open the product-list.component.html file and add the following HTML snippet to display the
    contents of the favorites component:

        <h1>Favorites</h1>
        <app-favorites></app-favorites>

-  Let‚Äôs explain what we did in the previous example in more detail:
    We injected ProductsService in FavoritesComponent but we did not provide it through its injector.
    That is from @Injectable({ providedIn: 'root' }) as we removed the providedIn property in step 8)
    So, how was the component aware of how to create an instance of the ProductsService class and use it?
    It wasn‚Äôt.
    When we added the favorites component to the ProductListComponent template, we made it a direct child
    of product list component, thus giving it access to all its provided services.
    In a nutshell, FavoritesComponent can use ProductsService out of the box because it is already
    provided through the element injector of its parent component, ProductListComponent.

    üìù
    If we remove the providers array(element injector) from the @Component decorator
    from product-list.component.ts, then there will be error because we don't have providedIn
    property(environment injectors) anymore in the product.service.ts. So in order for our app to work
    there should be either a environment injectors or element injectors.
    Since we have used element injector in product-list.component.ts, favorite.component.ts will have
    an access to the injector so we don't need to add providers array in the @Component decorator.